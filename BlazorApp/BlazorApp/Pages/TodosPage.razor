@page "/{ListId:long}"
@inject TodosViewModel vm
@inject ModalService modalService 

@{
    RenderFragment DescLabel = @<label> Deadline </label>;
}

@if (vm.List == null)
{
    <h3>Loading...</h3>
}
else
{
    <h3>@vm.List.Name</h3>
    <Card Size="small" BodyStyle="display: flex; flex-direction: row; align-items: center;">
        <Button Icon="plus">
        </Button>
        <Input placeholder="What should I do? (press Enter)" @bind-Value="vm.NewTodo" @onkeydown="onKeyPressed" />
    </Card>
    @foreach (var todo in vm.List.Todos)
    {
        <Card @key="todo.Id" Size="small" BodyStyle="display: flex; flex-direction: row; align-items: center;">
            <Button @onclick="@(() => vm.ChangeDone(todo))" Icon="@(todo.Done?"check":" ")" />
            <div class="todo-body" @onclick="(()=> vm.ChangeSelected(todo))">
                <div class="todo-row">
                    <Icon Type="star" Theme="outline" Style="font-size:1.5em;" @onclick="@(() => vm.ChangeImportant(todo))" />
                    <span Style="font-size:1.5em;" @onclick="@(()=>vm.ChangeSelected(todo))">@todo.Title</span>
                </div>
                <div class="todo-row">
                    <Icon Type="calendar" Theme="outline" />
                    <span><Text>@todo.DeadLine?.ToString("yyyy.MM.dd.")</Text></span>
                </div>

            </div>
        </Card>
    }
    @if (vm.Selected != null)
    {
        <Drawer Width="600" Visible="@(vm.Selected != null)" Closable="true" OnClose="@(() => vm.ChangeSelected(null))">
            <Form Model="vm.Selected" OnFinish="vm.UpdateTodo">
                <div class="todo-row">
                    <Button @onclick="@(() => vm.ChangeDone(vm.Selected))" Icon="@(vm.Selected.Done?"check":" ")" />
                    <Input @bind-Value="context.Title" Class="inputField" />
                    <Button Icon="star"></Button>
                    <Button Icon="delete" @onclick="OnDeleteTodo"/>
                </div>
                <label class="input-label" htmlFor="editview-deadline">Deadline</label>
                <DatePicker Id="editview-deadline" Class="inputField" TValue="DateTime?" @bind-Value="context.DeadLine" Picker="@DatePickerType.Date" />
                <label class="input-label" htmlFor="editview-description">Notes:</label>
                <TextArea Id="editview-description" @bind-Value="context.Description" Class="inputField" />
                <Button class="submit-button" HtmlType="submit">Save</Button>
            </Form>
        </Drawer>
    }
}



<style>
    .todo-body {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        padding: 0px 0px 0px 8px;
    }

    .todo-title {
        font-size: medium
    }

    .todo-row {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .inputField {
        width: 100%;
    }

    .input-label {
        margin: 8px 0px 0px 4px
    }

    .submit-button {
        margin: 4px 0px 0px 0px;
    }
</style>

@code {
    [Parameter]
    public long ListId { get; set; }

    public string NewTodo { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await vm.Load(ListId);

    }

    public async Task onKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await vm.AddTodo();
        }
    }

    public async Task OnFinish(EditContext editContext)
    {
        await vm.UpdateTodo();
    }

    public async Task OnDeleteTodo()
    {
        RenderFragment content =@<div>confirm content</div>;

        var options = new ConfirmOptions()
        {
            Title = "Do you want to delete this?",
            Width = 350,
            Content = content,
            OnOk = async(e) => { await vm.DeleteTodo(); },
            OnCancel = async (e) => { }
        };

        var confirmRef = await modalService.CreateConfirmAsync(options);
    }

}
