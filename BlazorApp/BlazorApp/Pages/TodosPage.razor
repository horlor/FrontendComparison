@page "/{ListId}"
@inject TodosViewModel vm
@inject ModalService modalService

@{
    RenderFragment DescLabel = @<label> Deadline </label>;
}

@if (vm.List == null)
{
    <h3>Loading...</h3>
}
else
{
    <div style="display:flex; justify-content:space-between;">
        <h3>@vm.List.Name</h3>
        <Dropdown Placement="@PlacementType.BottomRight" Trigger="@(new TriggerType[] { TriggerType.Click })">
            <Overlay>
                <Menu>
                    <MenuItem>
                        Rename List
                    </MenuItem>
                    <MenuItem OnClick="OnDeleteList">
                        Delete list
                    </MenuItem>
                    <MenuItem OnClick="OnDeleteTodos">
                        Delete all items
                    </MenuItem>
                    <MenuItem OnClick="OnDeleteDoneTodos">
                        Delete all done items
                    </MenuItem>
                </Menu>
            </Overlay>
            <ChildContent>
                <Button>
                    <Icon Type="more" Theme="outline" />
                </Button>
            </ChildContent>
        </Dropdown>

    </div>
    <Card Size="small" BodyStyle="display: flex; flex-direction: row; align-items: center;">
        <Button Icon="plus">
        </Button>
        <Input placeholder="What should I do? (press Enter)" @bind-Value="vm.NewTodo" @onkeydown="onKeyPressed" />
    </Card>
    @foreach (var todo in vm.List.Todos)
    {
        <Card @key="todo.Id" Size="small" BodyStyle="display: flex; flex-direction: row; align-items: center;">
            <Button @onclick="@(() => vm.ChangeDone(todo))" Icon="@(todo.Done?"check":" ")" />
            <div class="todo-body" @onclick="(()=> vm.ChangeSelected(todo))">
                <div class="todo-row">
                    <Icon Type="star" Theme="outline" Style=@($"font-size:1.5em; {(todo.Important?"color: gold":" ")}") OnClick="@(async(e) => {await vm.ChangeImportant(todo); })" />
                    <span Style="font-size:1.5em;" @onclick="@(()=>vm.ChangeSelected(todo))">@todo.Title</span>
                </div>
                <div class="todo-row">
                    @if (todo.DeadLine != null)
                    {
                        <Icon Type="calendar" Theme="outline" />
                        <span><Text>@todo.DeadLine?.ToString("yyyy.MM.dd.")</Text></span>
                        @if (!String.IsNullOrEmpty(todo.Description))
                        {
                            <span><Text>&emsp;·&emsp;</Text></span>
                        }
                    }
                    @if (!String.IsNullOrEmpty(todo.Description))
                    {
                        <Icon Type="paper-clip" Theme="outline" />
                    }
                    <span>&emsp;</span>
                </div>

            </div>
        </Card>
    }
    @if (vm.Selected != null)
    {
        <Drawer Width="600" Visible="@(vm.Selected != null)" Closable="true" OnClose="@(() => vm.ChangeSelected(null))">
            <Form Model="vm.Selected" OnFinish="vm.UpdateTodo">
                <div class="todo-row">
                    <Button @onclick="@(() => vm.ChangeDone(vm.Selected))" Icon="@(vm.Selected.Done?"check":" ")" />
                    <Input @bind-Value="context.Title" Class="inputField" />
                    <Button Icon="star" @onclick="vm.StarSelected" style=@(vm.Selected.Important?"color: gold":" ")></Button>
                    <Button Icon="delete" @onclick="OnDeleteTodo" />
                </div>
                <label class="input-label" htmlFor="editview-deadline">Deadline</label>
                <DatePicker Id="editview-deadline" Class="inputField" TValue="DateTime?" @bind-Value="context.DeadLine" Picker="@DatePickerType.Date" />
                <label class="input-label" htmlFor="editview-description">Notes:</label>
                <TextArea Id="editview-description" @bind-Value="context.Description" Class="inputField" />
                <Button class="submit-button" HtmlType="submit">Save</Button>
            </Form>
        </Drawer>
    }
}
@{
    RenderFragment OkButton = @<Button OnClick="vm.DismissError">Ok</Button>;
}
@if (vm.Error != null)
{
    <Modal Title=@vm.Error.Title
           Visible=@(vm.Error != null)
           Footer="OkButton">
        @vm.Error.Message
    </Modal>
}



<style>
    .todo-body {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        padding: 0px 0px 0px 8px;
    }

    .todo-title {
        font-size: medium
    }

    .todo-row {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .inputField {
        width: 100%;
    }

    .input-label {
        margin: 8px 0px 0px 4px
    }

    .submit-button {
        margin: 4px 0px 0px 0px;
    }
</style>

@code {
    [Parameter]
    public string ListId { get; set; }

    public string NewTodo { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await vm.Load(ListId);

    }

    public async Task onKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await vm.AddTodo();
        }
    }

    public async Task OnFinish(EditContext editContext)
    {
        await vm.UpdateTodo();
    }

    public async Task OnDeleteTodo()
    {
        RenderFragment content =@<div>@vm.Selected.Title</div>;

var options = new ConfirmOptions()
{
Title = "Do you want to delete this?",
Width = 350,
Content = content,
OkText = "Delete",
CancelText = "Cancel",
OnOk = async (e) => { await vm.DeleteTodo(); StateHasChanged(); },
OnCancel = async (e) => { }
};

var confirmRef = await modalService.CreateConfirmAsync(options);

}

public async Task OnDeleteTodos()
{
await modalService.CreateConfirmAsync(
new ConfirmOptions()
{
Title = "Deleting",
OkText = "Ok",
Content = "Are you sure to delete all of the todos?",
CancelText = "Cancel",
OnOk = async (e) => { await vm.DeleteAllTodos(); StateHasChanged(); }
});

}


public async Task OnDeleteDoneTodos()
{
await modalService.CreateConfirmAsync(
new ConfirmOptions()
{
Title = "Deleting",
Content = "Are you sure to delete all the done todos?",
OkText = "Ok",
CancelText = "Cancel",
OnOk = async (e) => { await vm.DeleteAllTodos(); StateHasChanged(); }
});

}

public async Task OnDeleteList()
{
await modalService.CreateConfirmAsync(
new ConfirmOptions()
{
Title = "Deleting",
Content = "Are you sure to delete this list?",
OkText = "Ok",
CancelText = "Cancel",
OnOk = async (e) => { await vm.DeleteList(); StateHasChanged(); }
});

}

}
